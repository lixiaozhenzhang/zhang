import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class BillRecord {
    private String date;
    private double amount;
    private String category;
    private String remark;
    private boolean isIncome;

    public BillRecord(String date, double amount, String category, String remark, boolean isIncome) {
        this.date = date;
        this.amount = amount;
        this.category = category;
        this.remark = remark;
        this.isIncome = isIncome;
    }

    // Getters and toString() method
    public String getDate() { return date; }
    public double getAmount() { return amount; }
    public String getCategory() { return category; }
    public String getRemark() { return remark; }
    public boolean isIncome() { return isIncome; }

    @Override
    public String toString() {
        return "Date: " + date + ", Amount: " + amount + ", Category: " + category + ", Remark: " + remark;
    }
}

class BillManager {
    private List<BillRecord> incomeRecords = new ArrayList<>();
    private List<BillRecord> expenseRecords = new ArrayList<>();

    public void addIncome(String date, double amount, String category, String remark) {
        if (amount <= 0) {
            System.out.println("Income amount must be positive.");
            return;
        }
        incomeRecords.add(new BillRecord(date, amount, category, remark, true));
    }

    public void addExpense(String date, double amount, String category, String remark) {
        if (amount <= 0) {
            System.out.println("Expense amount must be positive.");
            return;
        }
        expenseRecords.add(new BillRecord(date, amount, category, remark, false));
    }

    public List<BillRecord> getIncomeRecords() {
        return incomeRecords;
    }

    public List<BillRecord> getExpenseRecords() {
        return expenseRecords;
    }

    public List<BillRecord> queryByDate(String date) {
        return Stream.concat(incomeRecords.stream(), expenseRecords.stream())
                .filter(record -> record.getDate().equals(date))
                .collect(Collectors.toList());
    }

    public List<BillRecord> queryByDateRange(String startDate, String endDate) {
        return Stream.concat(incomeRecords.stream(), expenseRecords.stream())
                .filter(record -> record.getDate().compareTo(startDate) >= 0 && record.getDate().compareTo(endDate) <= 0)
                .collect(Collectors.toList());
    }

    public List<BillRecord> queryByCategory(String category, boolean isIncome) {
        List<BillRecord> records = isIncome ? incomeRecords : expenseRecords;
        return records.stream()
                .filter(record -> record.getCategory().equals(category))
                .collect(Collectors.toList());
    }
}

public class Chain {
    private static final Scanner scanner = new Scanner(System.in);
    private static BillManager billManager = new BillManager();

    public static void main(String[] args) {
        while (true) {
            System.out.println("1. Add Income");
            System.out.println("2. Add Expense");
            System.out.println("3. Show All Bills");
            System.out.println("4. Query By Date");
            System.out.println("5. Query By Date Range");
            System.out.println("6. Query By Category");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    addIncome();
                    break;
                case 2:
                    addExpense();
                    break;
                case 3:
                    showAllBills();
                    break;
                case 4:
                    queryByDate();
                    break;
                case 5:
                    queryByDateRange();
                    break;
                case 6:
                    queryByCategory();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void addIncome() {
        System.out.print("Enter date (yyyy-MM-dd): ");
        String date = scanner.nextLine();
        System.out.print("Enter amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine();  // Consume newline
        System.out.print("Enter category: ");
        String category = scanner.nextLine();
        System.out.print("Enter remark: ");
        String remark = scanner.nextLine();
        billManager.addIncome(date, amount, category, remark);
    }

    private static void addExpense() {
        System.out.print("Enter date (yyyy-MM-dd): ");
        String date = scanner.nextLine();
        System.out.print("Enter amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine();  // Consume newline
        System.out.print("Enter category: ");
        String category = scanner.nextLine();
        System.out.print("Enter remark: ");
        String remark = scanner.nextLine();
        billManager.addExpense(date, amount, category, remark);
    }

    private static void showAllBills() {
        System.out.println("Income Records:");
        billManager.getIncomeRecords().forEach(System.out::println);
        System.out.println("\nExpense Records:");
        billManager.getExpenseRecords().forEach(System.out::println);
    }

    private static void queryByDate() {
        System.out.print("Enter date (yyyy-MM-dd): ");
        String date = scanner.nextLine();
        List<BillRecord> records = billManager.queryByDate(date);
        if (records.isEmpty()) {
            System.out.println("No records found for the specified date.");
        } else {
            System.out.println("Records found:");
            records.forEach(System.out::println);
        }
    }

    private static void queryByDateRange() {
        System.out.print("Enter start date (yyyy-MM-dd): ");
        String startDate = scanner.nextLine();
        System.out.print("Enter end date (yyyy-MM-dd): ");
        String endDate = scanner.nextLine();
        List<BillRecord> records = billManager.queryByDateRange(startDate, endDate);
        if (records.isEmpty()) {
            System.out.println("No records found for the specified date range.");
        } else {
            System.out.println("Records found:");
            records.forEach(System.out::println);
        }
    }

    private static void queryByCategory() {
        System.out.print("Enter category: ");
        String category = scanner.nextLine();
        System.out.print("Is it income? (true/false): ");
        boolean isIncome = scanner.nextBoolean();
        List<BillRecord> records = billManager.queryByCategory(category, isIncome);
        if (records.isEmpty()) {
            System.out.println("No records found for the specified category.");
        } else {
            System.out.println("Records found:");
            records.forEach(System.out::println);
        }
    }
}
